cip(1) -- convert integer and print
===================================

## SYNOPSIS

`cip` [-opts]

`cip` [-opts] [ number | Unicode_string ] ...

`cip` [-opts] -r [ min ] max [ step ]

## DESCRIPTION

cip(1) accepts numbers or Unicode characters as input, and prints them as base 8, 10, or 16 numbers or as Unicode characters.

The input can be either standard input or the command's arguments.

With the `-r` (range) option, `cip` generates a range of numbers to print, rather than reading them from the input.

## OPTIONS


### Output base or method

Only one of the following may be supplied:

`-b` `	` ` ` Numeric output in binary (base 2).

`-o` ` ` ` ` Numeric output in octal (base 8).

`-d` ` ` ` ` Numeric output in decimal (base 10).

`-h` (or `-x`) ` ` ` ` Numeric output in hexidecimal (base 16), using lowercase letters _a_-_f_ to represent digits 10-15.

`-H` (or `-X`) ` ` ` ` Numeric output in hexidecimal (base 16), using uppercase letters _A_-_F_ to represent digits 10-15.

`-U` ` ` ` ` Output in Unicode standard form for code points: U+_dddd_, where the _d_s are hexidecimal digits, using uppercase A-F.

`-c` ` ` ` ` Unicode character output.

### Input Base

Only one of the following may be supplied:

`-ib` _base_ ` ` ` ` Use _base_ as the numeric base of the input. _base_ can be any integer from 2 to 36. The letters A-Z, either uppercase or lowercase, are used to represent digits greater than 9.

`-ic` ` ` ` ` Accept Unicode characters as input. The characters are converted to their Unicode code points.

### Output Formatting

`-p` _string_ ` ` ` ` Use _string_ as a prefix to apply to every number in the output.

`-s` _string_ ` ` ` ` Use _string_ to separate numbers in the output.

`-w` ` ` ` ` Constant-width output. When generating a sequence, pad the shorter numbers with 0s to make all of the numbers equal width.

`-width` _number_ ` ` ` ` Pad all numbers in the output with 0s to make them equal in width to _number_ characters.

Only one of `-w` and `-width` may be supplied.

### Other options

`-r` [ _min_ ] _max_ [ _step_ ] ` ` ` ` Range. Output a sequence of integers or characters.

`-help` ` ` ` ` Print a help message.

## ARGUMENTS

There are two types of non-option arguments. When the `-r` option is not in use, supplying one or more arguments causes `cip` to accept input from the argument(s).

When the `-r` option is specified, the arguments specify the range of a sequence of integers or characters to generate. With one argument, the range is from 1 to the value of the argument. When two arguments are given, the range is from the first to the second argument. 

If the second argument is less than the first, `cip` will count downwards from the first towards the second.

If an additional argument is given, it specifies the amount by which to increment or decrement while stepping through the sequence.

## EXAMPLES

Print 237 in binary

`cip -b 237`

Convert 0xED to decimal

`cip 0xed`

or

`cip -ib=16 ed`

or

`cip -d -ib=16 ED`

Print a sequence of octal numbers from 45 (base 8) to 177 (base 8)

`cip -o -r 045 0177`

Print the lowercase Greek alphabet

`cip -c -r 0x3b1 0x3c9`

## BUGS

Input in the form U+_dddd_ (for Unicode code points) is not supported.

## SEE ALSO

od(1), hd(1), seq(1), numconv(1)

Go Command Line Parsing https://golang.org/pkg/flag/#hdr-Command_line_flag_syntax

Go Integer Parsing https://golang.org/pkg/strconv/#ParseInt

The Unicode Standard https://www.unicode.org/standard/standard.html

## AUTHOR

Jay Ts
(http://jayts.com)
